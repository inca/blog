{
    title: 'Substance Designer: fixing Pixel Processor precision/depth',
    date: '2020-05-12',
    tags: ['Substance Designer', 'Pixel Processor', 'Shaders'],
}

{.section.section--tldr}
Pixel Processors by default have 8 bit precision. If you're creating a grayscale map, you'd need to override "Output Format" and switch it to 16 bit-per-channel.

Here's a quick SD tip (just in case you didn't know): you can use Pixel Processor to quickly prototype your shaders.

{.sidenote}
Be sure to check out the amazing [Book of Shaders](https://thebookofshaders.com/) which can boost your procedural creativity to whole new levels!

There's just one tiny problem you may run into.

To demonstrate, let's create a very basic paraboloid shape.

~figure {.centered}
    ![](/img/posts/sd/pixproc-paraboloid-init.jpg)

    ~figcaption Pixel Processor graph for paraboloid shape.

Details: I've used a [dot product](https://en.wikipedia.org/wiki/Dot_product) of a position vector with itself, which is a very popular (and fast) technique of obtainining a "squared distance field". It works because dot product yields %%x^2 + y^2%% which is known to be an [equation of circle](https://en.wikipedia.org/wiki/Circle#Equations), with radius squared.

So far so good, but try plugging this to your Normal Map node and you'll see this:

~figure {.centered}
    ![](/img/posts/sd/pixproc-paraboloid-normal-bad.jpg)

    ~figcaption Normal Map created from the Pixel Processor output is jagged and seems to be lacking in precision.

Yeah, this normal map is pretty much broken. Compare it to the standard paraboloid shape:

~figure {.centered}
    ![](/img/posts/sd/pixproc-paraboloid-normal-good.jpg)

    ~figcaption Standard paraboloid produced by Shape node produces a correct normal map.

The answer is of course simple: Pixel Processor has lower depth by default (8 bit). In fact it has been shown on all the screenshots (`8bpc` on output preview, `L8` in nodes viewer) â€” but if you're anything like me you wouldn't really pay attention to all these "unimportant details". Well, not until they become important, right? :)

Ok, so the fix is actually pretty simple: just select Pixel Processor node, locate Output Format in Properties, switch Inheritance (that tiny blue/white icon) to "Absolute" and select 16 Bits per Channel.

~figure {.centered}
    ![](/img/posts/sd/pixproc-change-output-depth.jpg)

    ~figcaption Switching Pixel Processor Output Format to 16 bits.

Awesome! Now you can forget about precision problems and focus on creating some amazing shapes. Here's a little teaser for you:

~figure {.centered}
    ![](/img/posts/sd/pixproc-shape-tweak.gif)

    ~figcaption [Polar rose](https://en.wikipedia.org/wiki/Rose_(mathematics) shapes with different parameters.

And that's it. Hope this little tip helps you create some amazing procedural art. ðŸ’œ
